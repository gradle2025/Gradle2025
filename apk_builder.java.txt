using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace ApiGateway.Models
{
    public class JwtHelper
    {
        // Replace this key with a strong and secret key that is at least 256 bits long
        private static readonly byte[] _signInKey = Encoding.UTF8.GetBytes("MbQeThWmZq4t7w!zMbQeThWmZq4t7w!z");

        
       

        public static string CreateJwtToken(string clientId, int time)
        {
            var claims = new List<Claim>();
            claims.Add(new Claim("clientId", clientId));
            

            var id = new ClaimsIdentity(claims);
            var h = new JwtSecurityTokenHandler();
            var token = h.CreateToken(new SecurityTokenDescriptor()
            {
                Expires = DateTime.UtcNow.AddMinutes(time),
                Subject = id,
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(_signInKey), SecurityAlgorithms.HmacSha256)
            });
            return h.WriteToken(token);
        }

        public static bool ValidateJwtToken(string token)
        {
            var h = new JwtSecurityTokenHandler();

            try
            {
                h.ValidateToken(token, new TokenValidationParameters()
                {
                    ValidAlgorithms = new[] { SecurityAlgorithms.HmacSha256 },
                    ValidateAudience = false,
                    ValidateIssuer = false,
                    IssuerSigningKey = new SymmetricSecurityKey(_signInKey),
                    ValidateIssuerSigningKey = true,
                    ValidateLifetime = true
                }, out var securityToken);
                var jwt = securityToken as JwtSecurityToken;
            }
            catch
            {
                return false;
            }
            return true;
        }

        // Additional methods as needed

        private static string GenerateEncryptionKey(string deviceid)
        {
            Encoding ascii = Encoding.ASCII;
            String client_secret = "4138410547411729368";
            HMACSHA256 hmac = new HMACSHA256(ascii.GetBytes(client_secret));
            String encryDeviceid = Convert.ToBase64String(hmac.ComputeHash(ascii.GetBytes(deviceid)));

            return encryDeviceid;
        }

        public static string TokenExpiryTime(string token)
        {
            JwtSecurityToken jwtSecurityToken;
            try
            {
                jwtSecurityToken = new JwtSecurityToken(token);
            }
            catch (Exception)
            {
                throw;
            }
            return jwtSecurityToken.ValidTo.ToString();
        }

        public static string TokenGenerationTime(string token)
        {
            JwtSecurityToken jwtSecurityToken;
            try
            {
                jwtSecurityToken = new JwtSecurityToken(token);
            }
            catch (Exception)
            {
                throw;
            }

            return jwtSecurityToken.ValidFrom.ToString();
        }
    }
}
var employees = new[]
{
    new { Name = "Payal", Department = "HR", Salary = 50000 },
    new { Name = "Raj", Department = "IT", Salary = 70000 },
    new { Name = "Pabi", Department = "IT", Salary = 60000 },
    new { Name = "Soma", Department = "HR", Salary = 55000 }
};

var result = employees
    .GroupBy(e => e.Department)
    .Select(g => new
    {
        Department = g.Key,
        EmployeeCount = g.Count(),
        TotalSalary = g.Sum(e => e.Salary),
        AverageSalary = g.Average(e => e.Salary)
    });

foreach (var r in result)
{
    Console.WriteLine($"{r.Department} â†’ Count: {r.EmployeeCount}, Total: {r.TotalSalary}, Avg: {r.AverageSalary}");
}
  RequestModel model = JsonConvert.DeserializeObject<RequestModel>(jsonData.ToString());
 string Authtoken = Request.Headers["Authorization"];
var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
                string tokenclientId = jwt.Claims.FirstOrDefault(a => a.Type == "clientId")?.Value;
